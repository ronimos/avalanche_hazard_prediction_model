import folium
import geopandas as gpd
import pandas as pd
import logging
from datetime import datetime
import branca.colormap as cm
import re

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# --- CONFIGURATION ---
GEOJSON_PATH = 'data/raw/BC_Polygons.json'
# New path for individual avalanche records
AVALANCHE_RECORD_PATH = 'data/raw/avalanche-record-CAIC20240113-15.csv'
# Path for aggregated daily data per polygon
AVALANCHE_DATA_PATH = '../data/master_avalanche_dataset_target.csv'
# Path to the single prediction file generated by predict.py
PREDICTIONS_PATH = 'results/predictions.csv'
OUTPUT_MAP_PATH = 'results/prediction_map.html'

def parse_d_size(size_str):
    """Safely parses a D-size string (e.g., 'D2', 'D2.5') into a float."""
    if not isinstance(size_str, str):
        return 0.0
    # Use regex to find numbers (including decimals) in the string
    match = re.search(r'(\d+(\.\d+)?)', size_str)
    if match:
        return float(match.group(1))
    return 0.0

def create_prediction_map(geojson_path: str, avalanche_data_path: str, avalanche_record_path: str, predictions_path: str, output_path: str, target_date_str: str = None):
    """
    Reads GeoJSON, historical avalanche data, and model predictions to create an
    interactive Folium map comparing predicted hazard to observed significant activity.

    Args:
        geojson_path (str): Path to the forecast polygons GeoJSON file.
        avalanche_data_path (str): Path to the historical avalanche data CSV.
        avalanche_record_path (str): Path to the raw avalanche observation records.
        predictions_path (str): Path to the prediction results CSV.
        output_path (str): Path to save the output HTML map file.
        target_date_str (str, optional): A specific date (YYYY-MM-DD) to plot.
                                         If None, the date from the predictions file is used.
    """
    logging.info("Reading data sources...")
    try:
        gdf = gpd.read_file(geojson_path)
        activity_df = pd.read_csv(avalanche_data_path)
        preds_df = pd.read_csv(predictions_path)
        # Load the new raw avalanche records
        records_df = pd.read_csv(avalanche_record_path)
    except FileNotFoundError as e:
        logging.error(f"Could not read a required data file: {e}. Please check paths.")
        return
    except Exception as e:
        logging.error(f"An error occurred while reading data files: {e}")
        return

    # --- Determine the Date to Visualize ---
    if target_date_str:
        try:
            viz_date = pd.to_datetime(target_date_str)
        except ValueError:
            logging.error(f"Invalid date format for '{target_date_str}'. Please use YYYY-MM-DD.")
            return
    elif 'date' in preds_df.columns and not preds_df['date'].empty:
        viz_date = pd.to_datetime(preds_df['date'].iloc[0])
    else:
        logging.error("Could not determine a date to visualize from the prediction file.")
        return
    
    logging.info(f"Generating map for date: {viz_date.date()}")

    # --- Prepare Observed Data for the Target Date ---
    activity_df['date'] = pd.to_datetime(activity_df['date'])
    day_specific_activity = activity_df[activity_df['date'].dt.date == viz_date.date()].copy()

    day_specific_activity['significant_activity'] = (
        (day_specific_activity['max_destructive_size'] >= 2) |
        (day_specific_activity['num_daily_avalanches'] >= 5)
    )

    # --- Prepare Individual Avalanche Records for the Target Date ---
    records_df['Date'] = records_df['Date'].str.replace(r' \(.+\)', '', regex=True)
    records_df['Date'] = pd.to_datetime(records_df['Date'], errors='coerce')
    day_specific_records = records_df[records_df['Date'].dt.date == viz_date.date()].copy()
    
    day_specific_records['d_size_numeric'] = day_specific_records['sizeD'].apply(parse_d_size)
    significant_avalanches = day_specific_records[day_specific_records['d_size_numeric'] > 1].copy()

    # FIX: Convert coordinate columns to numeric, coercing errors to NaN, then drop rows with NaN coordinates
    significant_avalanches['latitude'] = pd.to_numeric(significant_avalanches['latitude'], errors='coerce')
    significant_avalanches['Longitude'] = pd.to_numeric(significant_avalanches['Longitude'], errors='coerce')
    significant_avalanches.dropna(subset=['latitude', 'Longitude'], inplace=True)
    
    logging.info(f"Found {len(significant_avalanches)} individual significant avalanches (>D1) with valid coordinates for the target date.")

    # --- Merge Geospatial, Observed, and Predicted Data ---
    gdf['polygon'] = gdf['title'].astype(int)
    day_specific_activity['polygon'] = day_specific_activity['polygon'].astype(int)
    preds_df['polygon'] = preds_df['polygon'].astype(int)

    merged_gdf = gdf.merge(day_specific_activity, left_on='polygon', right_on='polygon', how='left')
    merged_gdf = merged_gdf.merge(preds_df[['polygon', 'hazard_score', 'prediction']], on='polygon', how='left')

    merged_gdf['significant_activity'] = merged_gdf['significant_activity'].fillna(False)
    merged_gdf['hazard_score'] = merged_gdf['hazard_score'].fillna(0)
    merged_gdf['prediction'] = merged_gdf['prediction'].fillna(0).astype(int)
    merged_gdf['max_destructive_size'] = merged_gdf['max_destructive_size'].fillna(0)
    merged_gdf['num_daily_avalanches'] = merged_gdf['num_daily_avalanches'].fillna(0)

    # --- Create the Map ---
    map_center = [merged_gdf.union_all().centroid.y, merged_gdf.union_all().centroid.x]
    m = folium.Map(location=map_center, zoom_start=6, tiles="CartoDB positron")

    title_html = f'''
                 <h3 align="center" style="font-size:20px; font-family: Arial, sans-serif;">
                   <b>Predicted Hazard vs. Observed Activity for {viz_date.strftime('%Y-%m-%d')}</b>
                 </h3>
                 '''
    m.get_root().html.add_child(folium.Element(title_html))

    prediction_colormap = cm.LinearColormap(
        colors=['#2ca02c', '#ff7f0e', '#d62728'], vmin=0, vmax=1,
        caption='Predicted Hazard Score'
    )
    
    # --- Create Map Layers ---
    observed_polygon_layer = folium.FeatureGroup(name='Observed Significant Activity (Polygon)', show=True)
    score_layer = folium.FeatureGroup(name='Predicted Hazard (Score)', show=True)
    event_layer = folium.FeatureGroup(name='Predicted Hazard (Event)', show=False)
    observed_points_layer = folium.FeatureGroup(name='Avalanche Observations (>D1)', show=True)

    # Convert Timestamp column to string to prevent JSON serialization error
    if 'date' in merged_gdf.columns:
        merged_gdf['date'] = merged_gdf['date'].apply(lambda x: x.strftime('%Y-%m-%d') if pd.notnull(x) else 'N/A')

    # --- Add Polygon Layers to Map (Efficiently) ---
    folium.GeoJson(
        merged_gdf,
        style_function=lambda feature: {
            'fillColor': '#d62728' if feature['properties']['significant_activity'] else '#3182bd',
            'color': 'black', 'weight': 1,
            'fillOpacity': 0.7 if feature['properties']['significant_activity'] else 0.2
        },
        tooltip=folium.GeoJsonTooltip(
            fields=['title', 'significant_activity', 'max_destructive_size', 'num_daily_avalanches'],
            aliases=['Region:', 'Significant Activity:', 'Max D-Size:', 'Avalanche Count:'],
            localize=True
        )
    ).add_to(observed_polygon_layer)

    folium.GeoJson(
        merged_gdf,
        style_function=lambda feature: {
            'fillColor': prediction_colormap(feature['properties']['hazard_score']),
            'color': 'black', 'weight': 1, 'fillOpacity': 0.7
        },
        tooltip=folium.GeoJsonTooltip(fields=['title', 'hazard_score'], aliases=['Region:', 'Predicted Score:'], localize=True)
    ).add_to(score_layer)

    merged_gdf['prediction_label'] = merged_gdf['prediction'].apply(lambda x: 'Yes' if x == 1 else 'No')
    folium.GeoJson(
        merged_gdf,
        style_function=lambda feature: {
            'fillColor': '#d62728' if feature['properties']['prediction'] == 1 else '#2ca02c',
            'color': 'black', 'weight': 1,
            'fillOpacity': 0.7 if feature['properties']['prediction'] == 1 else 0.2
        },
        tooltip=folium.GeoJsonTooltip(fields=['title', 'prediction_label'], aliases=['Region:', 'Hazard Predicted:'], localize=True)
    ).add_to(event_layer)

    # --- Add Individual Avalanche Points Layer ---
    # First, add the transparent polygon outlines for context
    folium.GeoJson(
        merged_gdf,
        style_function=lambda feature: {
            'fillOpacity': 0,
            'color': '#555555',
            'weight': 1,
            'dashArray': '5, 5'
        },
        tooltip=folium.GeoJsonTooltip(fields=['title'], aliases=['Region:'])
    ).add_to(observed_points_layer)

    # Then, add the individual avalanche points on top
    for _, row in significant_avalanches.iterrows():
        popup_html = f"""
        <b>Date:</b> {row['Date'].strftime('%Y-%m-%d')}<br>
        <b>D-Size:</b> {row['sizeD']}<br>
        <b>Type:</b> {row['Type']}<br>
        <b>Trigger:</b> {row['Trig']}<br>
        <b>Description:</b> {row['Description']}
        """
        folium.CircleMarker(
            location=[row['latitude'], row['Longitude']],
            radius=5,
            color='black',
            weight=1,
            fill=True,
            fill_color='red',
            fill_opacity=0.8,
            popup=folium.Popup(popup_html, max_width=300)
        ).add_to(observed_points_layer)

    observed_polygon_layer.add_to(m)
    score_layer.add_to(m)
    event_layer.add_to(m)
    observed_points_layer.add_to(m)
    
    m.add_child(prediction_colormap)
    
    legend_html = '''
     <div style="position: fixed; 
     bottom: 50px; left: 50px; width: 220px; height: 160px; 
     border:2px solid grey; z-index:9999; font-size:14px;
     background-color:white; padding: 5px;">
     <b>Observed Activity (Polygon)</b><br>
     <small>(D-Size &ge; 2 OR Count &ge; 5)</small><br>
     <i class="fa fa-square" style="color:#d62728"></i> Significant<br>
     <i class="fa fa-square" style="color:#3182bd"></i> Not Significant<br>
     <hr style="margin: 5px 0;">
     <b>Predicted Event</b><br>
     <i class="fa fa-square" style="color:#d62728"></i> Yes<br>
     <i class="fa fa-square" style="color:#2ca02c"></i> No
      </div>
    '''
    m.get_root().html.add_child(folium.Element(legend_html))
    
    folium.LayerControl().add_to(m)
    m.fit_bounds(m.get_bounds())
    m.save(output_path)
    logging.info(f"Successfully created and saved map to: {output_path}")

if __name__ == '__main__':
    plot_date = None
    
    create_prediction_map(
        GEOJSON_PATH,
        AVALANCHE_DATA_PATH,
        AVALANCHE_RECORD_PATH,
        PREDICTIONS_PATH,
        OUTPUT_MAP_PATH,
        target_date_str=plot_date
    )
